{
 "Parameters" : {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String"
    },
    "PEId" : {
      "Description" : "ID",
      "Type" : "String",
      "Default" : "puppet-enterprise-2.0rc1-62-g98b928c-el-6-i386"
    },
    "Payload" : {
      "Description" : "URL of PE installer payload",
      "Type" : "String",
      "Default" : "https://s3.amazonaws.com/cloud-formation-pe/puppet-enterprise-2.0rc1-62-g98b928c-el-6-i386.tar.gz"
    },
    "MasterAnswersFile" : {
      "Description": "URL where master answers file can be downloaded from",
      "Type" : "String",
      "Default" : "https://s3.amazonaws.com/cloud-formation-pe/full.answers"
    },
    "AgentAnswersFile" : {
      "Description": "URL where agent answers file can be downloaded from",
      "Type" : "String",
      "Default" : "https://s3.amazonaws.com/cloud-formation-pe/agent.answers"
    },
    "Modules" : {
      "Description" : "Names of modules to download from forge",
      "Type" : "CommaDelimitedList",
      "Default" : "foo"
    },
    "MasterInstanceType" : {
      "Description" : "Instance type for master",
      "Type" : "String",
      "Default" : "m1.small"
    },
    "AgentInstanceType" : {
      "Description" : "Instance type for agent",
      "Type" : "String",
      "Default" : "t1.micro"
    }
  },
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "32" },
      "m1.small"    : { "Arch" : "32" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "32" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64" }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-7f418316", "64" : "ami-7341831a" },
      "us-west-1"      : { "32" : "ami-951945d0", "64" : "ami-971945d2" },
      "eu-west-1"      : { "32" : "ami-24506250", "64" : "ami-20506254" },
      "ap-southeast-1" : { "32" : "ami-74dda626", "64" : "ami-7edda62c" },
      "ap-northeast-1" : { "32" : "ami-dcfa4edd", "64" : "ami-e8fa4ee9" }
    }
  },
  "Resources" : {
    "PuppetMasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allows communication to the puppet master",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" :  "8140", "ToPort" : "8140", "SourceSecurityGroupName" : { "Ref" : "PuppetClientSecurityGroup" }},
          { "IpProtocol" : "tcp", "FromPort" :  "61613", "ToPort" : "61613", "SourceSecurityGroupName" : { "Ref" : "PuppetClientSecurityGroup" }},
          { "IpProtocol" : "tcp", "FromPort" : "3000", "ToPort" : "3000", "CidrIp": "0.0.0.0/0"},
          { "IpProtocol" : "tcp", "FromPort" : "3001", "ToPort" : "3001", "CidrIp": "0.0.0.0/0"},
          { "IpProtocol" : "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },
    "PuppetClientSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allows ssh connections to the agents",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },
    "CFNInitUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Policies": [{
          "PolicyName": "AccessForCFNInit",
          "PolicyDocument" : {
            "Statement": [{
              "Effect"   : "Allow",
              "Action"   : "cloudformation:DescribeStackResource",
              "Resource" : "*"
             }]
          }
        }]
      }
    },
    "CFNKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref": "CFNInitUser" }
      }
    },
    "PuppetMasterInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "system-logos" : []
              }
            },
            "sources": {
              "/root/": {"Ref" : "Payload"},
              "/root/puppetlabs-dashboard/" : "https://github.com/bodepd/puppetlabs-dashboard/tarball/master"
            },
            "files": {
              "/root/answers": {
                "source" : { "Ref" : "MasterAnswersFile" }
              },
              "/etc/puppetlabs/puppet/autosign.conf" : {
                "content" : "*"
              },
              "/var/lib/cfn-init/data/cfn-credentials": {
                "content": { "Fn::Join" : ["", [
                  "AWSAccessKeyId=", { "Ref" : "CFNKeys" }, "\n",
                  "AWSSecretKey=", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}
                  ]] },
                "mode" : "00400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/lib/cfn-init/data/external_node" : {
                "source" : "https://s3.amazonaws.com/cloud-formation-pe/external_node",
                "mode" : "00550"
              }
            }
          }
        }
      },
      "Properties": {
        "InstanceType": { "Ref" : "MasterInstanceType"},
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "MasterInstanceType" }, "Arch" ] }
 ] },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups":  [ { "Ref" : "PuppetMasterSecurityGroup" } ],
          "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "/opt/aws/bin/cfn-init --region ", { "Ref" : "AWS::Region" },
            "    -s ", { "Ref" : "AWS::StackName" }, " -r PuppetMasterInstance ",
            "    --access-key ", { "Ref" : "CFNKeys" },
            "    --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n",
            "/root/", {"Ref" : "PEId"},"/puppet-enterprise-installer -a /root/answers -D  >& /tmp/pe-install.txt",  "\n",
            "mv /var/lib/cfn-init/data/external_node /etc/puppetlabs/puppet-dashboard/external_node", "\n",
            "chown pe-puppet:pe-puppet /var/lib/cfn-init/data/cfn-credentials /etc/puppetlabs/puppet-dashboard/external_node", "\n",
            "export PATH=/usr/local/bin/:$PATH;export RUBYLIB=/root/puppetlabs-dashboard/lib;/opt/puppet/bin/puppet dashboard add_module --modulepath /etc/puppetlabs/puppet/modules/ --enc-server localhost --module-name=<%= install_modules.join(',') %>", "\n",
            "/opt/puppet/bin/htpasswd -cb /etc/puppetlabs/httpd/dashboardpass puppet-user puppet-password", "\n",
            "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "PuppetMasterWaitHandle" }, "'\n",
            "\n" ]]}}
      }
    },
<% puppet_agents.each do |agent_name, klasses| -%>
    "<%= agent_name %>": {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "PuppetMasterWaitCondition",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "sources": {
              "/root/":  { "Ref" : "Payload" }
            },
            "files": {
              "/root/answers": {
                "source" : {"Ref" : "AgentAnswersFile"}
              },
              "/etc/puppetlabs/facter/facts.d/cloudformation.txt": {
                "content" : { "Fn::Join" : ["", [
                  "cfn_stack_name=",{ "Ref": "AWS::StackName" }, "\n",
                  "cfn_resource_id=<%= agent_name %>"
                ]] }
              }
            }
          }
        },
        "Puppet" : {
          "Classes" : <%= klasses.to_pson %>
        }
      },
      "Properties": {
        "InstanceType": { "Ref" : "AgentInstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "AgentInstanceType" }, "Arch" ] }
 ] },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups":  [ { "Ref" : "PuppetClientSecurityGroup" } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "/opt/aws/bin/cfn-init --region ", { "Ref" : "AWS::Region" },
            "    -s ", { "Ref" : "AWS::StackName" }, " -r <%= agent_name %> ",
            "    --access-key ", { "Ref" : "CFNKeys" },
            "    --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n",
            "echo 'q_puppetagent_server=", { "Fn::GetAtt" : [ "PuppetMasterInstance", "PrivateDnsName" ] } ,"' >> /root/answers", "\n",
            "/root/", {"Ref" : "PEId"},"/puppet-enterprise-installer -a /root/answers -D  >& /tmp/pe-install.txt",  "\n",
            "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "<%= agent_name %>WaitHandle" }, "'\n",
            "\n" ]]}}
      }
    },
<% end -%>
<% puppet_agents.keys.each do |agent_name| -%>
    "<%= agent_name %>WaitHandle" : {
       "Type" : "AWS::CloudFormation::WaitConditionHandle",
       "Properties" : {
       }
    },
    "<%= agent_name %>WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "<%= agent_name %>",
      "Properties" : {
        "Handle" : { "Ref" : "<%= agent_name %>WaitHandle" },
        "Timeout" : "600"
      }
    },
<% end -%>
    "PuppetMasterWaitHandle" : {
       "Type" : "AWS::CloudFormation::WaitConditionHandle",
       "Properties" : {
       }
    },
    "PuppetMasterWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "PuppetMasterInstance",
      "Properties" : {
        "Handle" : { "Ref" : "PuppetMasterWaitHandle" },
        "Timeout" : "600"
      }
    }
  },
  "Outputs" : {
    "PuppetMasterPublicDnsName" : {
      "Value" : { "Fn::GetAtt" : [ "PuppetMasterInstance", "PublicDnsName" ] }
    },
<% puppet_agents.keys.each do |agent_name| -%>
    "PuppetClientPublicDnsName" : {
      "Value" : { "Fn::GetAtt" : [ "<%= agent_name %>", "PublicDnsName" ] }
    },
<% end -%>
    "PuppetMasterPrivateDnsName" : {
      "Value" : { "Fn::GetAtt" : [ "PuppetMasterInstance", "PrivateDnsName" ] }
    }
  }
}
